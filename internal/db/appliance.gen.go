// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hardcaporg/hardcap/internal/model"
)

func newAppliance(db *gorm.DB, opts ...gen.DOOption) appliance {
	_appliance := appliance{}

	_appliance.applianceDo.UseDB(db, opts...)
	_appliance.applianceDo.UseModel(&model.Appliance{})

	tableName := _appliance.applianceDo.TableName()
	_appliance.ALL = field.NewAsterisk(tableName)
	_appliance.ID = field.NewInt32(tableName, "id")
	_appliance.Name = field.NewString(tableName, "name")
	_appliance.URL = field.NewString(tableName, "url")

	_appliance.fillFieldMap()

	return _appliance
}

type appliance struct {
	applianceDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	URL  field.String

	fieldMap map[string]field.Expr
}

func (a appliance) Table(newTableName string) *appliance {
	a.applianceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appliance) As(alias string) *appliance {
	a.applianceDo.DO = *(a.applianceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appliance) updateTableName(table string) *appliance {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.URL = field.NewString(table, "url")

	a.fillFieldMap()

	return a
}

func (a *appliance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appliance) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["url"] = a.URL
}

func (a appliance) clone(db *gorm.DB) appliance {
	a.applianceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appliance) replaceDB(db *gorm.DB) appliance {
	a.applianceDo.ReplaceDB(db)
	return a
}

type applianceDo struct{ gen.DO }

type IApplianceDo interface {
	gen.SubQuery
	Debug() IApplianceDo
	WithContext(ctx context.Context) IApplianceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApplianceDo
	WriteDB() IApplianceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApplianceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApplianceDo
	Not(conds ...gen.Condition) IApplianceDo
	Or(conds ...gen.Condition) IApplianceDo
	Select(conds ...field.Expr) IApplianceDo
	Where(conds ...gen.Condition) IApplianceDo
	Order(conds ...field.Expr) IApplianceDo
	Distinct(cols ...field.Expr) IApplianceDo
	Omit(cols ...field.Expr) IApplianceDo
	Join(table schema.Tabler, on ...field.Expr) IApplianceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApplianceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApplianceDo
	Group(cols ...field.Expr) IApplianceDo
	Having(conds ...gen.Condition) IApplianceDo
	Limit(limit int) IApplianceDo
	Offset(offset int) IApplianceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApplianceDo
	Unscoped() IApplianceDo
	Create(values ...*model.Appliance) error
	CreateInBatches(values []*model.Appliance, batchSize int) error
	Save(values ...*model.Appliance) error
	First() (*model.Appliance, error)
	Take() (*model.Appliance, error)
	Last() (*model.Appliance, error)
	Find() ([]*model.Appliance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appliance, err error)
	FindInBatches(result *[]*model.Appliance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appliance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApplianceDo
	Assign(attrs ...field.AssignExpr) IApplianceDo
	Joins(fields ...field.RelationField) IApplianceDo
	Preload(fields ...field.RelationField) IApplianceDo
	FirstOrInit() (*model.Appliance, error)
	FirstOrCreate() (*model.Appliance, error)
	FindByPage(offset int, limit int) (result []*model.Appliance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApplianceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.Appliance, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (a applianceDo) GetByID(id int) (result model.Appliance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM appliance WHERE id=? ")

	var executeSQL *gorm.DB

	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (a applianceDo) Debug() IApplianceDo {
	return a.withDO(a.DO.Debug())
}

func (a applianceDo) WithContext(ctx context.Context) IApplianceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applianceDo) ReadDB() IApplianceDo {
	return a.Clauses(dbresolver.Read)
}

func (a applianceDo) WriteDB() IApplianceDo {
	return a.Clauses(dbresolver.Write)
}

func (a applianceDo) Session(config *gorm.Session) IApplianceDo {
	return a.withDO(a.DO.Session(config))
}

func (a applianceDo) Clauses(conds ...clause.Expression) IApplianceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applianceDo) Returning(value interface{}, columns ...string) IApplianceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applianceDo) Not(conds ...gen.Condition) IApplianceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applianceDo) Or(conds ...gen.Condition) IApplianceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applianceDo) Select(conds ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applianceDo) Where(conds ...gen.Condition) IApplianceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applianceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApplianceDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a applianceDo) Order(conds ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applianceDo) Distinct(cols ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applianceDo) Omit(cols ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applianceDo) Join(table schema.Tabler, on ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applianceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applianceDo) RightJoin(table schema.Tabler, on ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applianceDo) Group(cols ...field.Expr) IApplianceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applianceDo) Having(conds ...gen.Condition) IApplianceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applianceDo) Limit(limit int) IApplianceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applianceDo) Offset(offset int) IApplianceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applianceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApplianceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applianceDo) Unscoped() IApplianceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applianceDo) Create(values ...*model.Appliance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applianceDo) CreateInBatches(values []*model.Appliance, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applianceDo) Save(values ...*model.Appliance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applianceDo) First() (*model.Appliance, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appliance), nil
	}
}

func (a applianceDo) Take() (*model.Appliance, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appliance), nil
	}
}

func (a applianceDo) Last() (*model.Appliance, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appliance), nil
	}
}

func (a applianceDo) Find() ([]*model.Appliance, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appliance), err
}

func (a applianceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appliance, err error) {
	buf := make([]*model.Appliance, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applianceDo) FindInBatches(result *[]*model.Appliance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applianceDo) Attrs(attrs ...field.AssignExpr) IApplianceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applianceDo) Assign(attrs ...field.AssignExpr) IApplianceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applianceDo) Joins(fields ...field.RelationField) IApplianceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applianceDo) Preload(fields ...field.RelationField) IApplianceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applianceDo) FirstOrInit() (*model.Appliance, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appliance), nil
	}
}

func (a applianceDo) FirstOrCreate() (*model.Appliance, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appliance), nil
	}
}

func (a applianceDo) FindByPage(offset int, limit int) (result []*model.Appliance, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applianceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applianceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applianceDo) Delete(models ...*model.Appliance) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applianceDo) withDO(do gen.Dao) *applianceDo {
	a.DO = *do.(*gen.DO)
	return a
}
