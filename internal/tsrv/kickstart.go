package tsrv

import (
	"bytes"
	"net/http"
	"text/template"

	"github.com/hardcaporg/hardcap/internal/ctxval"
	"github.com/hardcaporg/hardcap/internal/tsrv/snip"
	"github.com/hardcaporg/hardcap/internal/version"
)

const welcomeTmpl = `
# Generated by Hardcap {{ .BuildCommit }} {{ .BuildTime }}

%pre --interpreter=/usr/bin/python --erroronfail --log=/mnt/sysimage/root/ks-pre.log
{{ .Pre }}
%end

%include /tmp/pre-generated.ks
`

type Vars struct {
	BuildCommit string
	BuildTime   string
	Pre         string
}

func KickstartTemplateService(w http.ResponseWriter, r *http.Request) {
	logger := ctxval.Logger(r.Context())

	pre, err := snip.EmbedFS.ReadFile("pre.py")
	if err != nil {
		logger.Error().Err(err).Msg("Unable to read pre template")
	}

	vars := Vars{
		BuildCommit: version.BuildCommit,
		BuildTime:   version.BuildTime,
		Pre:         string(pre),
	}

	tmpl := template.Must(template.New("ks").Parse(welcomeTmpl))
	buf := bytes.NewBuffer(nil)
	err = tmpl.Execute(buf, vars)
	if err != nil {
		logger.Error().Err(err).Msg("Unable to render kickstart template")
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(buf.Bytes())
}
