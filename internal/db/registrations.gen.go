// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hardcaporg/hardcap/internal/model"
)

func newRegistration(db *gorm.DB, opts ...gen.DOOption) registration {
	_registration := registration{}

	_registration.registrationDo.UseDB(db, opts...)
	_registration.registrationDo.UseModel(&model.Registration{})

	tableName := _registration.registrationDo.TableName()
	_registration.ALL = field.NewAsterisk(tableName)
	_registration.ID = field.NewInt32(tableName, "id")
	_registration.Sid = field.NewString(tableName, "sid")
	_registration.Name = field.NewString(tableName, "name")
	_registration.BiosVendor = field.NewString(tableName, "bios_vendor")
	_registration.BiosVersion = field.NewString(tableName, "bios_version")
	_registration.BiosReleaseDate = field.NewString(tableName, "bios_release_date")
	_registration.BiosRevision = field.NewString(tableName, "bios_revision")
	_registration.FirmwareRevision = field.NewString(tableName, "firmware_revision")
	_registration.SystemManufacturer = field.NewString(tableName, "system_manufacturer")
	_registration.SystemProductName = field.NewString(tableName, "system_product_name")
	_registration.SystemVersion = field.NewString(tableName, "system_version")
	_registration.SystemSerialNumber = field.NewString(tableName, "system_serial_number")
	_registration.SystemUUID = field.NewString(tableName, "system_uuid")
	_registration.SystemSkuNumber = field.NewString(tableName, "system_sku_number")
	_registration.SystemFamily = field.NewString(tableName, "system_family")
	_registration.BaseboardManufacturer = field.NewString(tableName, "baseboard_manufacturer")
	_registration.BaseboardProductName = field.NewString(tableName, "baseboard_product_name")
	_registration.BaseboardVersion = field.NewString(tableName, "baseboard_version")
	_registration.BaseboardSerialNumber = field.NewString(tableName, "baseboard_serial_number")
	_registration.BaseboardAssetTag = field.NewString(tableName, "baseboard_asset_tag")
	_registration.ChassisManufacturer = field.NewString(tableName, "chassis_manufacturer")
	_registration.ChassisType = field.NewString(tableName, "chassis_type")
	_registration.ChassisVersion = field.NewString(tableName, "chassis_version")
	_registration.ChassisSerialNumber = field.NewString(tableName, "chassis_serial_number")
	_registration.ChassisAssetTag = field.NewString(tableName, "chassis_asset_tag")
	_registration.ProcessorFamily = field.NewString(tableName, "processor_family")
	_registration.ProcessorManufacturer = field.NewString(tableName, "processor_manufacturer")
	_registration.ProcessorVersion = field.NewString(tableName, "processor_version")
	_registration.ProcessorFrequency = field.NewString(tableName, "processor_frequency")

	_registration.fillFieldMap()

	return _registration
}

type registration struct {
	registrationDo

	ALL                   field.Asterisk
	ID                    field.Int32
	Sid                   field.String
	Name                  field.String
	BiosVendor            field.String
	BiosVersion           field.String
	BiosReleaseDate       field.String
	BiosRevision          field.String
	FirmwareRevision      field.String
	SystemManufacturer    field.String
	SystemProductName     field.String
	SystemVersion         field.String
	SystemSerialNumber    field.String
	SystemUUID            field.String
	SystemSkuNumber       field.String
	SystemFamily          field.String
	BaseboardManufacturer field.String
	BaseboardProductName  field.String
	BaseboardVersion      field.String
	BaseboardSerialNumber field.String
	BaseboardAssetTag     field.String
	ChassisManufacturer   field.String
	ChassisType           field.String
	ChassisVersion        field.String
	ChassisSerialNumber   field.String
	ChassisAssetTag       field.String
	ProcessorFamily       field.String
	ProcessorManufacturer field.String
	ProcessorVersion      field.String
	ProcessorFrequency    field.String

	fieldMap map[string]field.Expr
}

func (r registration) Table(newTableName string) *registration {
	r.registrationDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registration) As(alias string) *registration {
	r.registrationDo.DO = *(r.registrationDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registration) updateTableName(table string) *registration {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Sid = field.NewString(table, "sid")
	r.Name = field.NewString(table, "name")
	r.BiosVendor = field.NewString(table, "bios_vendor")
	r.BiosVersion = field.NewString(table, "bios_version")
	r.BiosReleaseDate = field.NewString(table, "bios_release_date")
	r.BiosRevision = field.NewString(table, "bios_revision")
	r.FirmwareRevision = field.NewString(table, "firmware_revision")
	r.SystemManufacturer = field.NewString(table, "system_manufacturer")
	r.SystemProductName = field.NewString(table, "system_product_name")
	r.SystemVersion = field.NewString(table, "system_version")
	r.SystemSerialNumber = field.NewString(table, "system_serial_number")
	r.SystemUUID = field.NewString(table, "system_uuid")
	r.SystemSkuNumber = field.NewString(table, "system_sku_number")
	r.SystemFamily = field.NewString(table, "system_family")
	r.BaseboardManufacturer = field.NewString(table, "baseboard_manufacturer")
	r.BaseboardProductName = field.NewString(table, "baseboard_product_name")
	r.BaseboardVersion = field.NewString(table, "baseboard_version")
	r.BaseboardSerialNumber = field.NewString(table, "baseboard_serial_number")
	r.BaseboardAssetTag = field.NewString(table, "baseboard_asset_tag")
	r.ChassisManufacturer = field.NewString(table, "chassis_manufacturer")
	r.ChassisType = field.NewString(table, "chassis_type")
	r.ChassisVersion = field.NewString(table, "chassis_version")
	r.ChassisSerialNumber = field.NewString(table, "chassis_serial_number")
	r.ChassisAssetTag = field.NewString(table, "chassis_asset_tag")
	r.ProcessorFamily = field.NewString(table, "processor_family")
	r.ProcessorManufacturer = field.NewString(table, "processor_manufacturer")
	r.ProcessorVersion = field.NewString(table, "processor_version")
	r.ProcessorFrequency = field.NewString(table, "processor_frequency")

	r.fillFieldMap()

	return r
}

func (r *registration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registration) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 29)
	r.fieldMap["id"] = r.ID
	r.fieldMap["sid"] = r.Sid
	r.fieldMap["name"] = r.Name
	r.fieldMap["bios_vendor"] = r.BiosVendor
	r.fieldMap["bios_version"] = r.BiosVersion
	r.fieldMap["bios_release_date"] = r.BiosReleaseDate
	r.fieldMap["bios_revision"] = r.BiosRevision
	r.fieldMap["firmware_revision"] = r.FirmwareRevision
	r.fieldMap["system_manufacturer"] = r.SystemManufacturer
	r.fieldMap["system_product_name"] = r.SystemProductName
	r.fieldMap["system_version"] = r.SystemVersion
	r.fieldMap["system_serial_number"] = r.SystemSerialNumber
	r.fieldMap["system_uuid"] = r.SystemUUID
	r.fieldMap["system_sku_number"] = r.SystemSkuNumber
	r.fieldMap["system_family"] = r.SystemFamily
	r.fieldMap["baseboard_manufacturer"] = r.BaseboardManufacturer
	r.fieldMap["baseboard_product_name"] = r.BaseboardProductName
	r.fieldMap["baseboard_version"] = r.BaseboardVersion
	r.fieldMap["baseboard_serial_number"] = r.BaseboardSerialNumber
	r.fieldMap["baseboard_asset_tag"] = r.BaseboardAssetTag
	r.fieldMap["chassis_manufacturer"] = r.ChassisManufacturer
	r.fieldMap["chassis_type"] = r.ChassisType
	r.fieldMap["chassis_version"] = r.ChassisVersion
	r.fieldMap["chassis_serial_number"] = r.ChassisSerialNumber
	r.fieldMap["chassis_asset_tag"] = r.ChassisAssetTag
	r.fieldMap["processor_family"] = r.ProcessorFamily
	r.fieldMap["processor_manufacturer"] = r.ProcessorManufacturer
	r.fieldMap["processor_version"] = r.ProcessorVersion
	r.fieldMap["processor_frequency"] = r.ProcessorFrequency
}

func (r registration) clone(db *gorm.DB) registration {
	r.registrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registration) replaceDB(db *gorm.DB) registration {
	r.registrationDo.ReplaceDB(db)
	return r
}

type registrationDo struct{ gen.DO }

type IRegistrationDo interface {
	gen.SubQuery
	Debug() IRegistrationDo
	WithContext(ctx context.Context) IRegistrationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegistrationDo
	WriteDB() IRegistrationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegistrationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegistrationDo
	Not(conds ...gen.Condition) IRegistrationDo
	Or(conds ...gen.Condition) IRegistrationDo
	Select(conds ...field.Expr) IRegistrationDo
	Where(conds ...gen.Condition) IRegistrationDo
	Order(conds ...field.Expr) IRegistrationDo
	Distinct(cols ...field.Expr) IRegistrationDo
	Omit(cols ...field.Expr) IRegistrationDo
	Join(table schema.Tabler, on ...field.Expr) IRegistrationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegistrationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegistrationDo
	Group(cols ...field.Expr) IRegistrationDo
	Having(conds ...gen.Condition) IRegistrationDo
	Limit(limit int) IRegistrationDo
	Offset(offset int) IRegistrationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistrationDo
	Unscoped() IRegistrationDo
	Create(values ...*model.Registration) error
	CreateInBatches(values []*model.Registration, batchSize int) error
	Save(values ...*model.Registration) error
	First() (*model.Registration, error)
	Take() (*model.Registration, error)
	Last() (*model.Registration, error)
	Find() ([]*model.Registration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Registration, err error)
	FindInBatches(result *[]*model.Registration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Registration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegistrationDo
	Assign(attrs ...field.AssignExpr) IRegistrationDo
	Joins(fields ...field.RelationField) IRegistrationDo
	Preload(fields ...field.RelationField) IRegistrationDo
	FirstOrInit() (*model.Registration, error)
	FirstOrCreate() (*model.Registration, error)
	FindByPage(offset int, limit int) (result []*model.Registration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegistrationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.Registration, err error)
	GetBySID(sid string) (result model.Registration, err error)
}

//SELECT * FROM @@table WHERE id=@id
func (r registrationDo) GetByID(id int) (result model.Registration, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM registrations WHERE id=? ")

	var executeSQL *gorm.DB

	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

//SELECT * FROM @@table WHERE sid=@sid
func (r registrationDo) GetBySID(sid string) (result model.Registration, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, sid)
	generateSQL.WriteString("SELECT * FROM registrations WHERE sid=? ")

	var executeSQL *gorm.DB

	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (r registrationDo) Debug() IRegistrationDo {
	return r.withDO(r.DO.Debug())
}

func (r registrationDo) WithContext(ctx context.Context) IRegistrationDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registrationDo) ReadDB() IRegistrationDo {
	return r.Clauses(dbresolver.Read)
}

func (r registrationDo) WriteDB() IRegistrationDo {
	return r.Clauses(dbresolver.Write)
}

func (r registrationDo) Session(config *gorm.Session) IRegistrationDo {
	return r.withDO(r.DO.Session(config))
}

func (r registrationDo) Clauses(conds ...clause.Expression) IRegistrationDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registrationDo) Returning(value interface{}, columns ...string) IRegistrationDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registrationDo) Not(conds ...gen.Condition) IRegistrationDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registrationDo) Or(conds ...gen.Condition) IRegistrationDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registrationDo) Select(conds ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registrationDo) Where(conds ...gen.Condition) IRegistrationDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registrationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRegistrationDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r registrationDo) Order(conds ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registrationDo) Distinct(cols ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registrationDo) Omit(cols ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registrationDo) Join(table schema.Tabler, on ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registrationDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registrationDo) Group(cols ...field.Expr) IRegistrationDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registrationDo) Having(conds ...gen.Condition) IRegistrationDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registrationDo) Limit(limit int) IRegistrationDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registrationDo) Offset(offset int) IRegistrationDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistrationDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registrationDo) Unscoped() IRegistrationDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registrationDo) Create(values ...*model.Registration) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registrationDo) CreateInBatches(values []*model.Registration, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registrationDo) Save(values ...*model.Registration) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registrationDo) First() (*model.Registration, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Take() (*model.Registration, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Last() (*model.Registration, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) Find() ([]*model.Registration, error) {
	result, err := r.DO.Find()
	return result.([]*model.Registration), err
}

func (r registrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Registration, err error) {
	buf := make([]*model.Registration, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registrationDo) FindInBatches(result *[]*model.Registration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registrationDo) Attrs(attrs ...field.AssignExpr) IRegistrationDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registrationDo) Assign(attrs ...field.AssignExpr) IRegistrationDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registrationDo) Joins(fields ...field.RelationField) IRegistrationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registrationDo) Preload(fields ...field.RelationField) IRegistrationDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registrationDo) FirstOrInit() (*model.Registration, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) FirstOrCreate() (*model.Registration, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Registration), nil
	}
}

func (r registrationDo) FindByPage(offset int, limit int) (result []*model.Registration, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registrationDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registrationDo) Delete(models ...*model.Registration) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registrationDo) withDO(do gen.Dao) *registrationDo {
	r.DO = *do.(*gen.DO)
	return r
}
